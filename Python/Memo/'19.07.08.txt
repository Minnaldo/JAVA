* list [ , , , ]
- 접근방법 : list.  

* tuple ( , , , )
-튜플은 뭉텅이. 접근은 가능하나 변경 불가.
-변화되면 안되는 수치를 보통 저장함.

* dic
dic = {'a' : 1]
dic['b'] = 2
print(dic['a'], dic['b'])\

출력결과 : 1 2

* split()
: str.split() = output : [ ]

* strip()
: 양쪽 문자열을 없애버린다.

* elif
: else if 인데, 파이썬에서는 elif로 쓰임.

* global
: 함수 앞에 사용. (전역 변수 사용 할 때 쓰임)

* Ctrl + /
: 주석처리

* 모듈
# 1. thisismylibrary 모듈에 mylib이라는 별명을 붙여 임포트하세요.
import thisismylibrary as mylib

# 2. 모듈의 별명을 사용하여 add_txt 함수의 결과값을 ret1 변수에 저장해보세요.
ret1 = mylib.add_txt("a", "b")

# 3. 모듈의 별명을 사용하여 reverse 함수의 결과값을 ret2 변수에 저장해보세요
ret2 = mylib.reverse(3, 2, 1)

# 아래는 출력을 위한 코드입니다. 수정하지 마세요.
print(ret1)
print(ret2)

# 인덱스 -1에 해당하는 'n'를 출력합니다.
print(str_data[-1])
: 파이썬에서 -1은 뒤에서부터 출력.

* as
: 별명,, 앞 변수를 별명으로 변경.

* self
: 파이썬에서는 this가 아닌 self 인 듯.

* 클래스
: 공통적으로 다 있는것

* 인스턴스
: 클래스를 변수화 한 것.

* type
: 자료형 확인 type(정수형, 문자열, 리스트, 딕셔너리)

* abs
: 절대값

* 반올림
- 소수점 첫째자리 반올림 : ' 0 ' (round(1332, 0))
- 1의 자리에서 반올림 : ' -1 '   (round(1332, -1))
- 소수점 셋째자리에서 반올림 : '2'

* isalpha()
: 문자열이 알파벳인지 검사하기

* isdigit()
: 문자열이 숫자인지 검사하기

* isalnum()
: 문자열이 알파벳 또는 숫자인지 검사하기

* upper()
: 문자열 대문자로 변환하여 리턴

* lower()
: 문자열 소문자로 변환하여 리턴

* lstrip()
: 문자열의 왼쪽 공백을 모두 제거한 새로운 문자열을 리턴

* rstrip()
: 문자열의 오른쪽 공백을 모두 제거한 새로운 문자열을 리턴합니다.

* strip()
:  문자열의 양쪽 공백을 모두 제거한 새로운 문자열을 리턴합니다.

* count()
: 문자열 내에서 인자로 받은 문자열이 몇 번 나오는지 쉽게 구할 수 있다.

* find()
: 특정 문자열이 위치하는 인덱스를 얻을 수 있다.

* split()
: 구분자로 구분되어 있는 문자열을 분리하는 것을 파싱.

* join()
: 여러 개의 문자열을 하나의 문자열로 결합할 때 사용.
  인자로 리스트를 받아옵니다.

* replace()
: 문자열에서 특정 문자나 문자열을 다른 문자(열)로 변경할 떄 사용.

* sorted()  [아마 퀵소트?!]
: 인자로 입력받은 문자열을 알파벳 오름차순으로 정렬하고
  결괏값 리스트 형태로 리턴합니다.
  (대문자는 우선순위를 가집니다.)
  [내림차순으로 하고 싶을때,,  두번째 인자로 reverse=True)

* range
: 순차적인 정수 리스트를 만들 수 있다.
 [0, 1, 2, 3]   [100, 101, 102, 103]

* index
: 리스트에서 멤버의 값을 알고 있을 때,
  해당 멤버가 최초로 나타나는 위치의 인덱스를 리턴.

* reverse
: reverse는 리스트의 값이 바뀐다.
  원본의 지장이 가기 때문에, 복사해서 사용하던지 해야함.

*  ' * '
: * 연산자를 이용하여 반복된 리스트를 연결할 수 있음.

* append
: 인자로 입력된 값을 리스트 맨 마지막 요소로 추가

* del
- del 키워드와 리스트에서 제거하고 싶은 값의 인덱스를 사용하면
  리스트의 특정 위치의 요소를 제거할 수 있습니다.
- del 리스트명 : 리스트 전체 제거

* len
: 리스트를 비롯한 시퀀스 자료형의 크기 또는 길이를 구하는 함수.
listdata2 = [[2, 2, 1], 
             [3, 8, 5], 
             [7, 6, 3], 
             [6, 2, 3], 
             [9, 4, 4]]
listdata2 의 len은 5이다.

* enumerate()
: 시퀀스 자료형을 인자로 받아 각 요소를 인덱스와 함께
  쌍으로 추출할 수 있는 enumerate 객체를 리턴.

* items()
: 키, 모든 요소를 다 추출.
  추출 후, 리스트형으로 변경해줘야 함.

* 사전 정렬하기
  :sorted() 를 사용하면 사전을 인자로 입력받아 정렬 가능.

* 집합 연산
union = set1 | set2		#합집합
intersection = set1 & set2	#교집합
diff = set1 - set2		#차집합
xor = set1 ^ set2		#XOR

* CSV
import csv

with open('movies.csv') as file:
    reader = csv.reader(file, delimiter=',')
    for row in reader:
        print(row[0])

* CSV 파일을 읽고 제목의 리스트를 리턴.
with open(boos_csv) as books:
    reader = csv.reader(books, delimiter=',')
    get_title = lambda row: row[0]
    titles = map(get_title, reader)

    return list(titles)

* lambda
get_eng_title = lambda row: row.split(',')[1]
sorted(movies, key=get_eng_title)
	or
sorted(movies, key=lambda row: row.split(',')[1])

* aseert
#두 값이 같으면 통과, 아니면 에러
assert(square1(3) == square2(3))

map()
eng_titles = map(lambda row: row.split(',')[1], movies)

*한 줄 함수 작성하기
-lambda
def square(x):
    return x * x
square = lambda x: x * x

*string이 빈 문자
- (){}''  스트링이 비어있는 문자는 false다.