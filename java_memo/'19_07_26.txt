관련있는 변수들을 한번에 묶어 만들 수 있는
사용자정의 자료형... 구조체

class Person {
    String name;
    int age;
}

Person hong = new Person();
Person chan = new Person();

================================
함수란?    [기능]
->명령어들을 묶어서 이름 붙여준 것!!!

출퇴 (탈 것)
{
  (탈 것)  출근한다.
            개같이 일을한다.
  (탈 것)  퇴근한다.
}

==============================
필요한 자료형들을 구조체로 정의
필요한 기능들을 함수로 정의

학생 구조체
직장인 구조체

		학생 공부기능()
		직장인 출근 기능()
		직장인 휴가 기능()

학생 변수 1
학생 변수 2
직장인 변수 1
직장인 변수 2

클래스란?
-(변수+함수)
:  #관련있는# #변수와 함수를 묶어만든# 사용자정의 ##자료형##.

==========================================
생성자(Constructor)
  -리턴값이 없다. (void가 아니라 그냥 문법적으로 반환유형 자체가 없다.)
  -이름이 클래스와 같다.
  -생성자도 어쨌든 메소드인지라 오버로딩이 가능하다.
    [오버로딩(이름이 같지만, 매개변수가 다른것을 여러개 정의하는것)]
=================================================
상속에서의 생성자 호출...
-부모가... 기본 생성자가 있다면?   
  =>묵시적으로 기본 생성자를 호출함.
     내가 골라서 호출하고 싶으면 명시적으로 호출해주면 됨.  (키워드는 super)
-부모가... 기본 생성자가 없다면?  
  =>꼭 명시적으로 호출 해줘야함.
=================================================
 [세분화된 접근권한 제어가 가능]
-getter만 만들면  ->  읽기전용
-setter만 만들면  ->  읽기전용 
-setter에서 말 같지도 않은 값을 걸러내거나, 추가기능.!!!
-객체지향원칙에 충실.. (캡슐화)

-System.out.println(c instanceof Child);
  [Child 타입으로 c를 참조할 수 있냐?]
-System.out.println(c instanceof Super);
  [Super 타입으로 c를 참조할 수 있냐?]



=====================================
Singleton Patten
GoF의 디자인패턴 중 하나로  (GoF : Gang of Four 4명의 소프트웨어거장)
특정 클래스의 객체를 단 하나만 만들 수 있도록 하는 구조.

***싱글턴패턴 적용하기
1. 생성자를 private로 접근제한 시킨다...!
2. 자기 자신의 타입의 참조변수를 static으로 가진다...!
3. 2번에 대한 getter 작성 ~ 하면서
   (객체가 하나만 생성되도록 여기서 제한)


