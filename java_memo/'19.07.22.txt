함수 : 선언부, 구현부, 호출부 로 구성되어 있다.
 -선언부 : 지역함수,,
 -구현부 : 지역변수
 -호출부 : 타입x, 변수명
			|
--------------------------------|
		       stack|
			|
			|
			|
			|
지역변수는 프레임이 있는동안 살아있다.

* 객체는 클래스로 만든다.
- 첫 라인 : package
- 두 번째라인 : import  (필요하다면)
- 하나의 .java 파일에는 몇 개의 클래스를 선언할 수 있을까?
  : 여러개 가능..
     *** [다만, public 클래스는 단 하나만 가능하다.] ***
- 클래스 안의 클래스는 가능한가?
  : 가능하다.
   =>class 안의 클래스를 만들경우 'Operation$Hello.class' 이런식으로 만들어짐.

* import java.util.*
  : * -> all 이라는 뜻이라, 전체를 다 import함.
  : C언어의 include 개념이 아니라,, 전체 파일 크기가 커지지는 않는다.
  : java.util.*
   (ArrayList a; 가 이런식으로 전체가 바뀐다. => java.util.ArrayList a;   )
  

-void name() 함수에 static을 써줘야  main 함수에서 호출이 가능하다.
-static을 쓰지 않고 void name()이라고 선언하면, main함수에서 호출 불가능.

객체지향(OOP)
-추상화(Abstraction)
  :object
-캡슐화(Encapsulation)
-다형성(Polmorphism)
-상속성(Inheritance)

붕어빵,,  		객체는 [Heap영역]
-클래스 : 틀
  클래스를 잘 만들어야 객체가 잘 나온다.
  [클래스를 이용해서 객체를 뽑아내기 위해]
-객체는 클래스로부터 얼마나 뽑아낼 수 있을까?
 (재료 떨어질때까지..)   
  ->따라서, 여유 메모리가 있을때까지 생성 가능하다.
-클래스에서 10개의 객체를 뽑아낸 후,  객체(값이 변함)는 각자 달라질 수 있다.
 [객체는 클래스의 블루프린터다.]

*class 구현   [빵틀]
class name {
    변수
    메소드
    생성자
}

클래스
: 변수, 메소드, 생성자,,

*객체를 만드는 키워드 [new]

*생성자 (Constructor)
 -이 함수는 클래스랑 이름이 같다.
##-이 함수는 객체화 만들어질 때, 호출이 된다. ( new 할 때,,)##
 -하나가 아니라 여러가지를 만들 수 있다.
  (허나, 인자가 달라야 한다.)			[오버로드]	-함수명은 같고 인자(매개변수)가 다른..
  (인자의 갯수나, 타입이 달라야 한다.)		[생성자 오버로드]
 -하나의 클래스에 생성자를 여러개 만들 수 있다.
 -생성자를 하나라도 만들면,  default 생성자는 안 만들어진다.
*** -클래스의 생성자를 하나도 만들었을때, default 생성자는 안 만들어진다. *** [시험]

*this
-메소드 안에서 쓸 수 있다.
-메소드를 가지고 있는 객체가 this 이다.
-this() -> 생성자