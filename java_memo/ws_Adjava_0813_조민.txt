-- 16) 10번 부서 월급의 평균, 최고, 최저, 인원수를 구하여 검색하세요.
select deptno, avg(sal), max(sal), min(sal), count(*) from emp group by deptno = 10;
-- 17)  각 부서별 같은 업무를 하는 사람의 인원수를 구하여 부서번호,업무명, 인원수를 검색하세요.
select deptno, job, count(*) from emp group by deptno, job order by deptno;
-- 18)  같은 업무를 하는 사람의 수가 4명 이상인 업무와 인원수를 검색하세요.
select job, count(*) from emp group by job having count(*) >= 4;


-- 1. 도서 정보를 저장하기 위한 테이블을 설계해 보자.
create table books (
	isbn char(8) primary key
    , title varchar(50) not null
    , author varchar(10) not null
    , publisher varchar(15) not null
    , price int not null
    , description varchar(200)
    );
-- drop table books;
-- 2. 도서 데이터를 5개 이상 insert 쿼리를 이용하여 저장하여 보자
insert into books(isbn, title, author, publisher, price, description) 
		   values('123-1-14', 'Java와 coffee', 'diana', '자바닷컴', '8000', '삶의 즐거움');
insert into books(isbn, title, author, publisher, price) 
		   values('555-23-2', 'AI와 미래', '김현주', '미래닷컴', '20000');
insert into books(isbn, title, author, publisher, price, description) 
		   values('123-2-15', 'Java와 놀기', '김태희', '자바닷컴', '22000', 'Java 정복');
insert into books(isbn, title, author, publisher, price, description) 
		   values('123-6-24', 'Java와 알고리즘', '서민규', '자바닷컴', '20000', '성능 업!!');
insert into books(isbn, title, author, publisher, price) 
		   values('423-5-36', 'IoT세상', '이세준', '미래닷컴', '25000');           
   
-- 3. 모든 도서의 가격을 10% 인하하도록 수정하고, 결과를 검색하여 보자.   
update books set price = price*0.9;
select * from books;  

-- 4. 제목에 JAVA가 포함된 도서들은 20% 가격을 인하하도록 수정하고, 결과 를 검색하여 보자
update books set price = price*0.2 where title like '%JAVA%';
select * from books;

-- 5. 제목에 JAVA가 포함된 도서에서 가격이 10,000 미만인 도서는 삭제하고 , 결과를 검색하여 보자.
delete from books where title like '%Java%' and price < 10000;
select * from books;

-- 6. 출판사별 도서의 개수와 가격의 합계, 가격의 평균을 검색하여 보자.
select publisher, count(*), sum(price), avg(price) from books group by publisher;